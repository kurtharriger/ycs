generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ORGANIZER
  MEMBER
}

enum UserStatus {
  ACTIVE      // Normal user status
  SUSPENDED   // User account is suspended
  BETA        // User has access to beta features
}

enum CommunityType {
  PERSONAL    // Single user's personal community
  MODERATED   // Community with defined roles and permissions
  OPEN        // Community where all members can create events
}

enum CommunityRole {
  OWNER       // Can manage community settings, add other owners/admins
  ADMIN       // Can manage members and events
  ORGANIZER   // Can create and manage events
  MEMBER      // Can view and participate in events
}

model AppUser {
  id                    String      @id @default(cuid())
  email                 String      @unique
  name                  String?
  phoneNumber           String?
  emailVerified         DateTime?
  role                  UserRole    @default(MEMBER)
  status                UserStatus  @default(ACTIVE)
  personalCommunity     Community?  @relation("PersonalCommunity")
  communityMemberships  CommunityMember[]
  createdEvents         Event[]     @relation("EventCreator")
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@map("app_users")
}

model Community {
  id            String        @id @default(cuid())
  name          String
  description   String?
  type          CommunityType @default(MODERATED)
  owner         AppUser?      @relation("PersonalCommunity", fields: [ownerId], references: [id])
  ownerId       String?       @unique
  members       CommunityMember[]
  events        Event[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([ownerId])
}

model CommunityMember {
  id            String        @id @default(cuid())
  community     Community     @relation(fields: [communityId], references: [id])
  communityId   String
  user          AppUser       @relation(fields: [userId], references: [id])
  userId        String
  role          CommunityRole @default(MEMBER)
  joinedAt      DateTime      @default(now())

  @@unique([communityId, userId])
  @@index([userId])
}

model Event {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdBy   AppUser   @relation("EventCreator", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([communityId])
  @@index([createdById])
}

model AuthCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}
